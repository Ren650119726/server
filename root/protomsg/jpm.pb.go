// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/jpm.proto

package protomsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 网络消息
type JPMMSG int32

const (
	JPMMSG_UNKNOW_JPM              JPMMSG = 0
	JPMMSG_CS_ENTER_GAME_JPM_REQ   JPMMSG = 20001
	JPMMSG_SC_ENTER_GAME_JPM_RES   JPMMSG = 20002
	JPMMSG_CS_LEAVE_GAME_JPM_REQ   JPMMSG = 20003
	JPMMSG_SC_LEAVE_GAME_JPM_RES   JPMMSG = 20004
	JPMMSG_CS_START_JPM_REQ        JPMMSG = 20008
	JPMMSG_SC_START_JPM_RES        JPMMSG = 20009
	JPMMSG_SC_UPDATE_JPM_BONUS     JPMMSG = 20010
	JPMMSG_CS_NEXT_JPM_RESULT      JPMMSG = 20013
	JPMMSG_CS_PLAYERS_JPM_LIST_REQ JPMMSG = 20015
	JPMMSG_SC_PLAYERS_JPM_LIST_RES JPMMSG = 20016
)

var JPMMSG_name = map[int32]string{
	0:     "UNKNOW_JPM",
	20001: "CS_ENTER_GAME_JPM_REQ",
	20002: "SC_ENTER_GAME_JPM_RES",
	20003: "CS_LEAVE_GAME_JPM_REQ",
	20004: "SC_LEAVE_GAME_JPM_RES",
	20008: "CS_START_JPM_REQ",
	20009: "SC_START_JPM_RES",
	20010: "SC_UPDATE_JPM_BONUS",
	20013: "CS_NEXT_JPM_RESULT",
	20015: "CS_PLAYERS_JPM_LIST_REQ",
	20016: "SC_PLAYERS_JPM_LIST_RES",
}
var JPMMSG_value = map[string]int32{
	"UNKNOW_JPM":              0,
	"CS_ENTER_GAME_JPM_REQ":   20001,
	"SC_ENTER_GAME_JPM_RES":   20002,
	"CS_LEAVE_GAME_JPM_REQ":   20003,
	"SC_LEAVE_GAME_JPM_RES":   20004,
	"CS_START_JPM_REQ":        20008,
	"SC_START_JPM_RES":        20009,
	"SC_UPDATE_JPM_BONUS":     20010,
	"CS_NEXT_JPM_RESULT":      20013,
	"CS_PLAYERS_JPM_LIST_REQ": 20015,
	"SC_PLAYERS_JPM_LIST_RES": 20016,
}

func (x JPMMSG) String() string {
	return proto.EnumName(JPMMSG_name, int32(x))
}
func (JPMMSG) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

// 游戏1 图案枚举
type JPMID int32

const (
	JPMID_JPMUnknow JPMID = 0
	JPMID_JPM1      JPMID = 1
	JPMID_JPM2      JPMID = 2
	JPMID_JPM3      JPMID = 3
	JPMID_JPM4      JPMID = 4
	JPMID_JPM5      JPMID = 5
	JPMID_JPM6      JPMID = 6
	JPMID_JPM7      JPMID = 7
	JPMID_JPM8      JPMID = 8
	JPMID_JPM9      JPMID = 9
	JPMID_JPM10     JPMID = 10
	JPMID_JPM11     JPMID = 11
)

var JPMID_name = map[int32]string{
	0:  "JPMUnknow",
	1:  "JPM1",
	2:  "JPM2",
	3:  "JPM3",
	4:  "JPM4",
	5:  "JPM5",
	6:  "JPM6",
	7:  "JPM7",
	8:  "JPM8",
	9:  "JPM9",
	10: "JPM10",
	11: "JPM11",
}
var JPMID_value = map[string]int32{
	"JPMUnknow": 0,
	"JPM1":      1,
	"JPM2":      2,
	"JPM3":      3,
	"JPM4":      4,
	"JPM5":      5,
	"JPM6":      6,
	"JPM7":      7,
	"JPM8":      8,
	"JPM9":      9,
	"JPM10":     10,
	"JPM11":     11,
}

func (x JPMID) String() string {
	return proto.EnumName(JPMID_name, int32(x))
}
func (JPMID) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

// 请求进入房间
type ENTER_GAME_JPM_REQ struct {
	AccountID uint32 `protobuf:"varint,1,opt,name=AccountID" json:"AccountID,omitempty"`
	RoomID    uint32 `protobuf:"varint,2,opt,name=RoomID" json:"RoomID,omitempty"`
}

func (m *ENTER_GAME_JPM_REQ) Reset()                    { *m = ENTER_GAME_JPM_REQ{} }
func (m *ENTER_GAME_JPM_REQ) String() string            { return proto.CompactTextString(m) }
func (*ENTER_GAME_JPM_REQ) ProtoMessage()               {}
func (*ENTER_GAME_JPM_REQ) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ENTER_GAME_JPM_REQ) GetAccountID() uint32 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *ENTER_GAME_JPM_REQ) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type ENTER_GAME_JPM_RES struct {
	RoomID   uint32   `protobuf:"varint,1,opt,name=RoomID" json:"RoomID,omitempty"`
	Basics   int64    `protobuf:"varint,2,opt,name=Basics" json:"Basics,omitempty"`
	Bonus    int64    `protobuf:"varint,3,opt,name=Bonus" json:"Bonus,omitempty"`
	LastBet  int64    `protobuf:"varint,4,opt,name=LastBet" json:"LastBet,omitempty"`
	Bets     []uint64 `protobuf:"varint,5,rep,packed,name=Bets" json:"Bets,omitempty"`
	FeeCount int32    `protobuf:"varint,8,opt,name=FeeCount" json:"FeeCount,omitempty"`
}

func (m *ENTER_GAME_JPM_RES) Reset()                    { *m = ENTER_GAME_JPM_RES{} }
func (m *ENTER_GAME_JPM_RES) String() string            { return proto.CompactTextString(m) }
func (*ENTER_GAME_JPM_RES) ProtoMessage()               {}
func (*ENTER_GAME_JPM_RES) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *ENTER_GAME_JPM_RES) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *ENTER_GAME_JPM_RES) GetBasics() int64 {
	if m != nil {
		return m.Basics
	}
	return 0
}

func (m *ENTER_GAME_JPM_RES) GetBonus() int64 {
	if m != nil {
		return m.Bonus
	}
	return 0
}

func (m *ENTER_GAME_JPM_RES) GetLastBet() int64 {
	if m != nil {
		return m.LastBet
	}
	return 0
}

func (m *ENTER_GAME_JPM_RES) GetBets() []uint64 {
	if m != nil {
		return m.Bets
	}
	return nil
}

func (m *ENTER_GAME_JPM_RES) GetFeeCount() int32 {
	if m != nil {
		return m.FeeCount
	}
	return 0
}

// 请求退出房间
type LEAVE_GAME_JPM_REQ struct {
	AccountID uint32 `protobuf:"varint,1,opt,name=AccountID" json:"AccountID,omitempty"`
	RoomID    uint32 `protobuf:"varint,2,opt,name=RoomID" json:"RoomID,omitempty"`
}

func (m *LEAVE_GAME_JPM_REQ) Reset()                    { *m = LEAVE_GAME_JPM_REQ{} }
func (m *LEAVE_GAME_JPM_REQ) String() string            { return proto.CompactTextString(m) }
func (*LEAVE_GAME_JPM_REQ) ProtoMessage()               {}
func (*LEAVE_GAME_JPM_REQ) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *LEAVE_GAME_JPM_REQ) GetAccountID() uint32 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *LEAVE_GAME_JPM_REQ) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type LEAVE_GAME_JPM_RES struct {
	Ret    uint32 `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	RoomID uint32 `protobuf:"varint,2,opt,name=RoomID" json:"RoomID,omitempty"`
}

func (m *LEAVE_GAME_JPM_RES) Reset()                    { *m = LEAVE_GAME_JPM_RES{} }
func (m *LEAVE_GAME_JPM_RES) String() string            { return proto.CompactTextString(m) }
func (*LEAVE_GAME_JPM_RES) ProtoMessage()               {}
func (*LEAVE_GAME_JPM_RES) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *LEAVE_GAME_JPM_RES) GetRet() uint32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *LEAVE_GAME_JPM_RES) GetRoomID() uint32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

// //////////////////////////////////////////// 游戏1 /////////////////////////////////////////////
// 请求开始游戏1
type START_JPM_REQ struct {
	Bet uint64 `protobuf:"varint,1,opt,name=Bet" json:"Bet,omitempty"`
}

func (m *START_JPM_REQ) Reset()                    { *m = START_JPM_REQ{} }
func (m *START_JPM_REQ) String() string            { return proto.CompactTextString(m) }
func (*START_JPM_REQ) ProtoMessage()               {}
func (*START_JPM_REQ) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *START_JPM_REQ) GetBet() uint64 {
	if m != nil {
		return m.Bet
	}
	return 0
}

type START_JPM_RES struct {
	Ret          uint64         `protobuf:"varint,1,opt,name=Ret" json:"Ret,omitempty"`
	SumOdds      int64          `protobuf:"varint,2,opt,name=SumOdds" json:"SumOdds,omitempty"`
	Results      []*JPM_Result  `protobuf:"bytes,3,rep,name=Results" json:"Results,omitempty"`
	PictureList  []int32        `protobuf:"varint,4,rep,packed,name=PictureList" json:"PictureList,omitempty"`
	Bonus        int64          `protobuf:"varint,5,opt,name=Bonus" json:"Bonus,omitempty"`
	Money        int64          `protobuf:"varint,6,opt,name=Money" json:"Money,omitempty"`
	FreeCount    int64          `protobuf:"varint,7,opt,name=FreeCount" json:"FreeCount,omitempty"`
	FeePositions []*JPMPosition `protobuf:"bytes,9,rep,name=FeePositions" json:"FeePositions,omitempty"`
}

func (m *START_JPM_RES) Reset()                    { *m = START_JPM_RES{} }
func (m *START_JPM_RES) String() string            { return proto.CompactTextString(m) }
func (*START_JPM_RES) ProtoMessage()               {}
func (*START_JPM_RES) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *START_JPM_RES) GetRet() uint64 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *START_JPM_RES) GetSumOdds() int64 {
	if m != nil {
		return m.SumOdds
	}
	return 0
}

func (m *START_JPM_RES) GetResults() []*JPM_Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *START_JPM_RES) GetPictureList() []int32 {
	if m != nil {
		return m.PictureList
	}
	return nil
}

func (m *START_JPM_RES) GetBonus() int64 {
	if m != nil {
		return m.Bonus
	}
	return 0
}

func (m *START_JPM_RES) GetMoney() int64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *START_JPM_RES) GetFreeCount() int64 {
	if m != nil {
		return m.FreeCount
	}
	return 0
}

func (m *START_JPM_RES) GetFeePositions() []*JPMPosition {
	if m != nil {
		return m.FeePositions
	}
	return nil
}

type JPMPosition struct {
	Px int32 `protobuf:"varint,1,opt,name=px" json:"px,omitempty"`
	Py int32 `protobuf:"varint,2,opt,name=py" json:"py,omitempty"`
}

func (m *JPMPosition) Reset()                    { *m = JPMPosition{} }
func (m *JPMPosition) String() string            { return proto.CompactTextString(m) }
func (*JPMPosition) ProtoMessage()               {}
func (*JPMPosition) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *JPMPosition) GetPx() int32 {
	if m != nil {
		return m.Px
	}
	return 0
}

func (m *JPMPosition) GetPy() int32 {
	if m != nil {
		return m.Py
	}
	return 0
}

type JPM_Result struct {
	LineId    int32          `protobuf:"varint,1,opt,name=LineId" json:"LineId,omitempty"`
	Count     int32          `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
	Odds      int32          `protobuf:"varint,3,opt,name=Odds" json:"Odds,omitempty"`
	Positions []*JPMPosition `protobuf:"bytes,4,rep,name=Positions" json:"Positions,omitempty"`
}

func (m *JPM_Result) Reset()                    { *m = JPM_Result{} }
func (m *JPM_Result) String() string            { return proto.CompactTextString(m) }
func (*JPM_Result) ProtoMessage()               {}
func (*JPM_Result) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *JPM_Result) GetLineId() int32 {
	if m != nil {
		return m.LineId
	}
	return 0
}

func (m *JPM_Result) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *JPM_Result) GetOdds() int32 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *JPM_Result) GetPositions() []*JPMPosition {
	if m != nil {
		return m.Positions
	}
	return nil
}

// 通知更新奖金池
type UPDATE_JPM_BONUS struct {
	Bonus int64 `protobuf:"varint,1,opt,name=Bonus" json:"Bonus,omitempty"`
}

func (m *UPDATE_JPM_BONUS) Reset()                    { *m = UPDATE_JPM_BONUS{} }
func (m *UPDATE_JPM_BONUS) String() string            { return proto.CompactTextString(m) }
func (*UPDATE_JPM_BONUS) ProtoMessage()               {}
func (*UPDATE_JPM_BONUS) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *UPDATE_JPM_BONUS) GetBonus() int64 {
	if m != nil {
		return m.Bonus
	}
	return 0
}

// 请求jpm玩家列表
type PLAYERS_JPM_LIST_RES struct {
	Players []*AccountStorageData `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
}

func (m *PLAYERS_JPM_LIST_RES) Reset()                    { *m = PLAYERS_JPM_LIST_RES{} }
func (m *PLAYERS_JPM_LIST_RES) String() string            { return proto.CompactTextString(m) }
func (*PLAYERS_JPM_LIST_RES) ProtoMessage()               {}
func (*PLAYERS_JPM_LIST_RES) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *PLAYERS_JPM_LIST_RES) GetPlayers() []*AccountStorageData {
	if m != nil {
		return m.Players
	}
	return nil
}

func init() {
	proto.RegisterType((*ENTER_GAME_JPM_REQ)(nil), "protomsg.ENTER_GAME_JPM_REQ")
	proto.RegisterType((*ENTER_GAME_JPM_RES)(nil), "protomsg.ENTER_GAME_JPM_RES")
	proto.RegisterType((*LEAVE_GAME_JPM_REQ)(nil), "protomsg.LEAVE_GAME_JPM_REQ")
	proto.RegisterType((*LEAVE_GAME_JPM_RES)(nil), "protomsg.LEAVE_GAME_JPM_RES")
	proto.RegisterType((*START_JPM_REQ)(nil), "protomsg.START_JPM_REQ")
	proto.RegisterType((*START_JPM_RES)(nil), "protomsg.START_JPM_RES")
	proto.RegisterType((*JPMPosition)(nil), "protomsg.JPM_position")
	proto.RegisterType((*JPM_Result)(nil), "protomsg.JPM_Result")
	proto.RegisterType((*UPDATE_JPM_BONUS)(nil), "protomsg.UPDATE_JPM_BONUS")
	proto.RegisterType((*PLAYERS_JPM_LIST_RES)(nil), "protomsg.PLAYERS_JPM_LIST_RES")
	proto.RegisterEnum("protomsg.JPMMSG", JPMMSG_name, JPMMSG_value)
	proto.RegisterEnum("protomsg.JPMID", JPMID_name, JPMID_value)
}

func init() { proto.RegisterFile("protobuf/jpm.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 731 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x6f, 0xda, 0x48,
	0x14, 0x8e, 0xb1, 0xcd, 0x8f, 0x97, 0x90, 0x1d, 0x4d, 0xd8, 0xac, 0x37, 0x9b, 0x95, 0x58, 0x4e,
	0x28, 0x07, 0xb2, 0xf9, 0xb1, 0xd9, 0xdd, 0x1e, 0x2a, 0x81, 0x71, 0x22, 0x28, 0x26, 0xce, 0x0c,
	0xf4, 0xd7, 0xc5, 0x72, 0xc0, 0x8d, 0x68, 0x03, 0x46, 0xd8, 0xa8, 0xe1, 0x5e, 0xf5, 0x1f, 0xe8,
	0x95, 0x4b, 0xdb, 0x1c, 0xda, 0x4a, 0x55, 0xfa, 0x27, 0x56, 0x33, 0x1e, 0x63, 0x28, 0xb4, 0xa7,
	0x9e, 0xf8, 0xbe, 0xf7, 0xbd, 0xf7, 0xe6, 0xcd, 0xf7, 0xc6, 0x00, 0x1e, 0x8e, 0xbc, 0xc0, 0xbb,
	0x1c, 0x3f, 0xdb, 0x7f, 0x3e, 0xec, 0x97, 0x38, 0xc1, 0x69, 0xfe, 0xd3, 0xf7, 0xaf, 0x76, 0xb6,
	0x66, 0x6a, 0xd7, 0x09, 0x9c, 0x50, 0x2e, 0xd4, 0x01, 0x1b, 0xcd, 0x96, 0x41, 0xec, 0xb3, 0xb2,
	0x69, 0xd8, 0x75, 0xcb, 0xb4, 0x89, 0x71, 0x81, 0x77, 0x21, 0x53, 0xee, 0x74, 0xbc, 0xf1, 0x20,
	0xa8, 0x55, 0x35, 0x29, 0x2f, 0x15, 0xb3, 0x24, 0x0e, 0xe0, 0x6d, 0x48, 0x12, 0xcf, 0xeb, 0xd7,
	0xaa, 0x5a, 0x82, 0x4b, 0x82, 0x15, 0x6e, 0xa5, 0x15, 0xcd, 0xe8, 0x5c, 0xba, 0x34, 0x9f, 0xce,
	0xe2, 0x15, 0xc7, 0xef, 0x75, 0x7c, 0xde, 0x46, 0x26, 0x82, 0xe1, 0x1c, 0xa8, 0x15, 0x6f, 0x30,
	0xf6, 0x35, 0x99, 0x87, 0x43, 0x82, 0x35, 0x48, 0x35, 0x1c, 0x3f, 0xa8, 0xb8, 0x81, 0xa6, 0xf0,
	0x78, 0x44, 0x31, 0x06, 0xa5, 0xe2, 0x06, 0xbe, 0xa6, 0xe6, 0xe5, 0xa2, 0x42, 0x38, 0xc6, 0x3b,
	0x90, 0x3e, 0x75, 0x5d, 0x9d, 0x0d, 0xac, 0xa5, 0xf3, 0x52, 0x51, 0x25, 0x33, 0xce, 0xae, 0xdc,
	0x30, 0xca, 0x0f, 0x8d, 0x9f, 0x71, 0xe5, 0xfb, 0x2b, 0x7a, 0x51, 0x8c, 0x40, 0x26, 0x6e, 0x20,
	0xba, 0x30, 0xf8, 0xdd, 0xfa, 0xbf, 0x20, 0x4b, 0x5b, 0x65, 0xd2, 0x9a, 0x8d, 0x81, 0x40, 0xae,
	0x88, 0x52, 0x85, 0x30, 0x58, 0x78, 0x93, 0x58, 0xcc, 0x59, 0x68, 0xaf, 0x84, 0xed, 0x35, 0x48,
	0xd1, 0x71, 0xff, 0xbc, 0xdb, 0x8d, 0xbc, 0x8c, 0x28, 0x2e, 0x41, 0x8a, 0xb8, 0xfe, 0xf8, 0x3a,
	0x60, 0x76, 0xca, 0xc5, 0xf5, 0xc3, 0x5c, 0x29, 0x7a, 0x10, 0x25, 0xde, 0x8f, 0x8b, 0x24, 0x4a,
	0xc2, 0x79, 0x58, 0xb7, 0x7a, 0x9d, 0x60, 0x3c, 0x72, 0x1b, 0x3d, 0x9f, 0x59, 0x2d, 0x17, 0x55,
	0x32, 0x1f, 0x8a, 0xd7, 0xa3, 0xce, 0xaf, 0x27, 0x07, 0xaa, 0xe9, 0x0d, 0xdc, 0x89, 0x96, 0x0c,
	0xa3, 0x9c, 0x30, 0x53, 0x4f, 0x47, 0xd1, 0x1e, 0x52, 0x5c, 0x89, 0x03, 0xf8, 0x1e, 0x6c, 0x9c,
	0xba, 0xae, 0xe5, 0xf9, 0xbd, 0xa0, 0xe7, 0x0d, 0x7c, 0x2d, 0xc3, 0x07, 0xdc, 0x5e, 0x1c, 0x70,
	0x28, 0x64, 0xb2, 0x90, 0x5b, 0x28, 0xc1, 0xc6, 0xbc, 0x8a, 0x37, 0x21, 0x31, 0xbc, 0xe1, 0x96,
	0xa8, 0x24, 0x31, 0xbc, 0xe1, 0x7c, 0xc2, 0xcd, 0x60, 0x7c, 0x52, 0x78, 0x25, 0x01, 0xc4, 0xf7,
	0x65, 0xfb, 0x68, 0xf4, 0x06, 0x6e, 0xad, 0x2b, 0x4a, 0x04, 0x63, 0xd7, 0x08, 0x87, 0x0d, 0x2b,
	0x43, 0xc2, 0x5e, 0x18, 0xf7, 0x56, 0xe6, 0x41, 0x8e, 0xf1, 0x31, 0x64, 0xe2, 0xc9, 0x95, 0x1f,
	0x4e, 0x1e, 0x27, 0x16, 0x8a, 0x80, 0xda, 0x56, 0xb5, 0xdc, 0x0a, 0xdf, 0x4a, 0xe5, 0xbc, 0xd9,
	0xa6, 0xb1, 0xa1, 0xd2, 0x9c, 0xa1, 0x85, 0x26, 0xe4, 0xac, 0x46, 0xf9, 0x89, 0x41, 0x28, 0x4f,
	0x6d, 0xd4, 0x68, 0x8b, 0x2f, 0xff, 0x04, 0x52, 0xc3, 0x6b, 0x67, 0xe2, 0x8e, 0x58, 0x3e, 0x3b,
	0x75, 0x37, 0x3e, 0x55, 0xbc, 0x57, 0x1a, 0x78, 0x23, 0xe7, 0xca, 0xad, 0x3a, 0x81, 0x43, 0xa2,
	0xe4, 0xbd, 0xbb, 0x04, 0x24, 0xeb, 0x96, 0x69, 0xd2, 0x33, 0xbc, 0x09, 0xd0, 0x6e, 0x3e, 0x68,
	0x9e, 0x3f, 0x62, 0x9d, 0xd1, 0x1a, 0xfe, 0x03, 0x7e, 0xd5, 0xa9, 0xbd, 0xfc, 0x37, 0x80, 0xde,
	0x4e, 0x25, 0x26, 0x52, 0x7d, 0x59, 0xa4, 0xe8, 0x5d, 0x28, 0xea, 0xd4, 0x5e, 0xfe, 0x9a, 0xd0,
	0xfb, 0x59, 0xe5, 0xf2, 0xe7, 0x81, 0x6e, 0xa7, 0x12, 0xde, 0x06, 0xa4, 0x53, 0x7b, 0xe1, 0xed,
	0xa3, 0x0f, 0x61, 0x9c, 0xea, 0x0b, 0x71, 0x8a, 0x3e, 0x4e, 0x25, 0xfc, 0x3b, 0x6c, 0x51, 0xdd,
	0xfe, 0xd6, 0x3b, 0xf4, 0x69, 0x2a, 0x61, 0x0d, 0xb0, 0x4e, 0xed, 0xa6, 0xf1, 0x78, 0x56, 0xd1,
	0x6e, 0xb4, 0xd0, 0xe7, 0xa9, 0x84, 0xff, 0x84, 0xdf, 0x74, 0x6a, 0xaf, 0xb0, 0xf1, 0x02, 0xdd,
	0x85, 0x32, 0xd5, 0x57, 0xc9, 0x14, 0x7d, 0x99, 0x4a, 0x7b, 0xaf, 0x25, 0x50, 0xeb, 0x96, 0x59,
	0xab, 0xe2, 0x2c, 0x64, 0xea, 0x96, 0xd9, 0x1e, 0xbc, 0x18, 0x78, 0x2f, 0xd1, 0x1a, 0x4e, 0x83,
	0x52, 0xb7, 0xcc, 0x03, 0x24, 0x09, 0x74, 0x88, 0x12, 0x02, 0x1d, 0x21, 0x59, 0xa0, 0x63, 0xa4,
	0x08, 0xf4, 0x0f, 0x52, 0x05, 0x3a, 0x41, 0x49, 0x81, 0xfe, 0x45, 0x29, 0x81, 0xfe, 0x43, 0x69,
	0x81, 0xfe, 0x47, 0x19, 0x9c, 0xe1, 0x27, 0x1e, 0xfc, 0x8d, 0x20, 0x82, 0x07, 0x68, 0xbd, 0xf2,
	0xcb, 0xd3, 0xec, 0xc8, 0xf3, 0x82, 0xfd, 0x68, 0xcf, 0x97, 0x49, 0x8e, 0x8e, 0xbe, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x82, 0x71, 0x13, 0xce, 0xf0, 0x05, 0x00, 0x00,
}
