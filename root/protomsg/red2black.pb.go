// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: protobuf/red2black.proto

package protomsg

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

////////////////////////////////////////////////////// 网络消息 /////////////////////////////////////////////////////////////
type RED2BLACKMSG int32

const (
	RED2BLACKMSG_UNKNOW_RED2BLACK                RED2BLACKMSG = 0
	RED2BLACKMSG_CS_ENTER_GAME_RED2BLACK_REQ     RED2BLACKMSG = 16001 // 玩家请求进入房间
	RED2BLACKMSG_SC_ENTER_GAME_RED2BLACK_RES     RED2BLACKMSG = 16002
	RED2BLACKMSG_CS_LEAVE_GAME_RED2BLACK_REQ     RED2BLACKMSG = 16003 // 玩家请求退出房间
	RED2BLACKMSG_SC_LEAVE_GAME_RED2BLACK_RES     RED2BLACKMSG = 16004
	RED2BLACKMSG_CS_BET_RED2BLACK_REQ            RED2BLACKMSG = 16008 // 请求下注
	RED2BLACKMSG_SC_BET_RED2BLACK_RES            RED2BLACKMSG = 16009
	RED2BLACKMSG_CS_CLEAN_BET_RED2BLACK_REQ      RED2BLACKMSG = 16010 // 请求清除下注
	RED2BLACKMSG_SC_CLEAN_BET_RED2BLACK_RES      RED2BLACKMSG = 16011
	RED2BLACKMSG_CS_PLAYERS_RED2BLACK_LIST_REQ   RED2BLACKMSG = 16015 // 请求在线玩家列表
	RED2BLACKMSG_SC_PLAYERS_RED2BLACK_LIST_RES   RED2BLACKMSG = 16016
	RED2BLACKMSG_SC_SWITCH_GAME_STATUS_BROADCAST RED2BLACKMSG = 16020 // 服务器主动广播，切换状态消息
)

// Enum value maps for RED2BLACKMSG.
var (
	RED2BLACKMSG_name = map[int32]string{
		0:     "UNKNOW_RED2BLACK",
		16001: "CS_ENTER_GAME_RED2BLACK_REQ",
		16002: "SC_ENTER_GAME_RED2BLACK_RES",
		16003: "CS_LEAVE_GAME_RED2BLACK_REQ",
		16004: "SC_LEAVE_GAME_RED2BLACK_RES",
		16008: "CS_BET_RED2BLACK_REQ",
		16009: "SC_BET_RED2BLACK_RES",
		16010: "CS_CLEAN_BET_RED2BLACK_REQ",
		16011: "SC_CLEAN_BET_RED2BLACK_RES",
		16015: "CS_PLAYERS_RED2BLACK_LIST_REQ",
		16016: "SC_PLAYERS_RED2BLACK_LIST_RES",
		16020: "SC_SWITCH_GAME_STATUS_BROADCAST",
	}
	RED2BLACKMSG_value = map[string]int32{
		"UNKNOW_RED2BLACK":                0,
		"CS_ENTER_GAME_RED2BLACK_REQ":     16001,
		"SC_ENTER_GAME_RED2BLACK_RES":     16002,
		"CS_LEAVE_GAME_RED2BLACK_REQ":     16003,
		"SC_LEAVE_GAME_RED2BLACK_RES":     16004,
		"CS_BET_RED2BLACK_REQ":            16008,
		"SC_BET_RED2BLACK_RES":            16009,
		"CS_CLEAN_BET_RED2BLACK_REQ":      16010,
		"SC_CLEAN_BET_RED2BLACK_RES":      16011,
		"CS_PLAYERS_RED2BLACK_LIST_REQ":   16015,
		"SC_PLAYERS_RED2BLACK_LIST_RES":   16016,
		"SC_SWITCH_GAME_STATUS_BROADCAST": 16020,
	}
)

func (x RED2BLACKMSG) Enum() *RED2BLACKMSG {
	p := new(RED2BLACKMSG)
	*p = x
	return p
}

func (x RED2BLACKMSG) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RED2BLACKMSG) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_red2black_proto_enumTypes[0].Descriptor()
}

func (RED2BLACKMSG) Type() protoreflect.EnumType {
	return &file_protobuf_red2black_proto_enumTypes[0]
}

func (x RED2BLACKMSG) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RED2BLACKMSG.Descriptor instead.
func (RED2BLACKMSG) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{0}
}

////////////////////////////////////////////////////// 游戏枚举 /////////////////////////////////////////////////////////////
// 下注区域
type RED2BLACKAREA int32

const (
	RED2BLACKAREA_RED2BLACK_AREA_Unknow RED2BLACKAREA = 0 // 无用的
	RED2BLACKAREA_RED2BLACK_AREA_RED    RED2BLACKAREA = 1 // 红区域
	RED2BLACKAREA_RED2BLACK_AREA_BLACK  RED2BLACKAREA = 2 // 黑区域
	RED2BLACKAREA_RED2BLACK_AREA_LUCK   RED2BLACKAREA = 3 // 幸运一击区域
)

// Enum value maps for RED2BLACKAREA.
var (
	RED2BLACKAREA_name = map[int32]string{
		0: "RED2BLACK_AREA_Unknow",
		1: "RED2BLACK_AREA_RED",
		2: "RED2BLACK_AREA_BLACK",
		3: "RED2BLACK_AREA_LUCK",
	}
	RED2BLACKAREA_value = map[string]int32{
		"RED2BLACK_AREA_Unknow": 0,
		"RED2BLACK_AREA_RED":    1,
		"RED2BLACK_AREA_BLACK":  2,
		"RED2BLACK_AREA_LUCK":   3,
	}
)

func (x RED2BLACKAREA) Enum() *RED2BLACKAREA {
	p := new(RED2BLACKAREA)
	*p = x
	return p
}

func (x RED2BLACKAREA) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RED2BLACKAREA) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_red2black_proto_enumTypes[1].Descriptor()
}

func (RED2BLACKAREA) Type() protoreflect.EnumType {
	return &file_protobuf_red2black_proto_enumTypes[1]
}

func (x RED2BLACKAREA) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RED2BLACKAREA.Descriptor instead.
func (RED2BLACKAREA) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{1}
}

// 牌型
type RED2BLACKCARDTYPE int32

const (
	RED2BLACKCARDTYPE_RED2BLACK_CARDTYPE_Unknow RED2BLACKCARDTYPE = 0 // 无用的
	RED2BLACKCARDTYPE_RED2BLACK_CARDTYPE_1      RED2BLACKCARDTYPE = 1 // 单张
	RED2BLACKCARDTYPE_RED2BLACK_CARDTYPE_2      RED2BLACKCARDTYPE = 2 // 对子
	RED2BLACKCARDTYPE_RED2BLACK_CARDTYPE_3      RED2BLACKCARDTYPE = 3 // 顺子
	RED2BLACKCARDTYPE_RED2BLACK_CARDTYPE_4      RED2BLACKCARDTYPE = 4 // 金花
	RED2BLACKCARDTYPE_RED2BLACK_CARDTYPE_5      RED2BLACKCARDTYPE = 5 // 顺金
	RED2BLACKCARDTYPE_RED2BLACK_CARDTYPE_6      RED2BLACKCARDTYPE = 6 // 豹子
	RED2BLACKCARDTYPE_RED2BLACK_CARDTYPE_7      RED2BLACKCARDTYPE = 7 // 235特殊牌
)

// Enum value maps for RED2BLACKCARDTYPE.
var (
	RED2BLACKCARDTYPE_name = map[int32]string{
		0: "RED2BLACK_CARDTYPE_Unknow",
		1: "RED2BLACK_CARDTYPE_1",
		2: "RED2BLACK_CARDTYPE_2",
		3: "RED2BLACK_CARDTYPE_3",
		4: "RED2BLACK_CARDTYPE_4",
		5: "RED2BLACK_CARDTYPE_5",
		6: "RED2BLACK_CARDTYPE_6",
		7: "RED2BLACK_CARDTYPE_7",
	}
	RED2BLACKCARDTYPE_value = map[string]int32{
		"RED2BLACK_CARDTYPE_Unknow": 0,
		"RED2BLACK_CARDTYPE_1":      1,
		"RED2BLACK_CARDTYPE_2":      2,
		"RED2BLACK_CARDTYPE_3":      3,
		"RED2BLACK_CARDTYPE_4":      4,
		"RED2BLACK_CARDTYPE_5":      5,
		"RED2BLACK_CARDTYPE_6":      6,
		"RED2BLACK_CARDTYPE_7":      7,
	}
)

func (x RED2BLACKCARDTYPE) Enum() *RED2BLACKCARDTYPE {
	p := new(RED2BLACKCARDTYPE)
	*p = x
	return p
}

func (x RED2BLACKCARDTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RED2BLACKCARDTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_red2black_proto_enumTypes[2].Descriptor()
}

func (RED2BLACKCARDTYPE) Type() protoreflect.EnumType {
	return &file_protobuf_red2black_proto_enumTypes[2]
}

func (x RED2BLACKCARDTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RED2BLACKCARDTYPE.Descriptor instead.
func (RED2BLACKCARDTYPE) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{2}
}

// 游戏状态
type RED2BLACKGAMESTATUS int32

const (
	RED2BLACKGAMESTATUS_RED2BLACK_GAMESTATUS_Unknow RED2BLACKGAMESTATUS = 0 // 无用的
	RED2BLACKGAMESTATUS_RED2BLACK_GAMESTATUS_WAIT   RED2BLACKGAMESTATUS = 1 // 等待开始
	RED2BLACKGAMESTATUS_RED2BLACK_GAMESTATUS_BET    RED2BLACKGAMESTATUS = 2 // 开始下注
	RED2BLACKGAMESTATUS_RED2BLACK_GAMESTATUS_STOP   RED2BLACKGAMESTATUS = 3 // 停止下注
	RED2BLACKGAMESTATUS_RED2BLACK_GAMESTATUS_SETTLE RED2BLACKGAMESTATUS = 4 // 结算
)

// Enum value maps for RED2BLACKGAMESTATUS.
var (
	RED2BLACKGAMESTATUS_name = map[int32]string{
		0: "RED2BLACK_GAMESTATUS_Unknow",
		1: "RED2BLACK_GAMESTATUS_WAIT",
		2: "RED2BLACK_GAMESTATUS_BET",
		3: "RED2BLACK_GAMESTATUS_STOP",
		4: "RED2BLACK_GAMESTATUS_SETTLE",
	}
	RED2BLACKGAMESTATUS_value = map[string]int32{
		"RED2BLACK_GAMESTATUS_Unknow": 0,
		"RED2BLACK_GAMESTATUS_WAIT":   1,
		"RED2BLACK_GAMESTATUS_BET":    2,
		"RED2BLACK_GAMESTATUS_STOP":   3,
		"RED2BLACK_GAMESTATUS_SETTLE": 4,
	}
)

func (x RED2BLACKGAMESTATUS) Enum() *RED2BLACKGAMESTATUS {
	p := new(RED2BLACKGAMESTATUS)
	*p = x
	return p
}

func (x RED2BLACKGAMESTATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RED2BLACKGAMESTATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_red2black_proto_enumTypes[3].Descriptor()
}

func (RED2BLACKGAMESTATUS) Type() protoreflect.EnumType {
	return &file_protobuf_red2black_proto_enumTypes[3]
}

func (x RED2BLACKGAMESTATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RED2BLACKGAMESTATUS.Descriptor instead.
func (RED2BLACKGAMESTATUS) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{3}
}

////////////////////////////////////////////////////// 消息数据结构 /////////////////////////////////////////////////////////////
// 请求进入房间
type ENTER_GAME_RED2BLACK_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID uint32 `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"` //
	RoomID    uint32 `protobuf:"varint,2,opt,name=RoomID,proto3" json:"RoomID,omitempty"`       // 房间ID
}

func (x *ENTER_GAME_RED2BLACK_REQ) Reset() {
	*x = ENTER_GAME_RED2BLACK_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENTER_GAME_RED2BLACK_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENTER_GAME_RED2BLACK_REQ) ProtoMessage() {}

func (x *ENTER_GAME_RED2BLACK_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENTER_GAME_RED2BLACK_REQ.ProtoReflect.Descriptor instead.
func (*ENTER_GAME_RED2BLACK_REQ) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{0}
}

func (x *ENTER_GAME_RED2BLACK_REQ) GetAccountID() uint32 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *ENTER_GAME_RED2BLACK_REQ) GetRoomID() uint32 {
	if x != nil {
		return x.RoomID
	}
	return 0
}

// 进入房间，服务器返回房间、游戏状态相关数据
type ENTER_GAME_RED2BLACK_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID         uint32                             `protobuf:"varint,1,opt,name=RoomID,proto3" json:"RoomID,omitempty"`                // 房间ID
	HistoryWinners []*ENTER_GAME_RED2BLACK_RES_Winner `protobuf:"bytes,2,rep,name=HistoryWinners,proto3" json:"HistoryWinners,omitempty"` // 最近70局的获胜区域
	Bets           []int64                            `protobuf:"varint,3,rep,packed,name=bets,proto3" json:"bets,omitempty"`             // 当前房间可押注筹码值
	ShowNum        uint32                             `protobuf:"varint,4,opt,name=ShowNum,proto3" json:"ShowNum,omitempty"`              // 当前房间开局前亮牌的数量
	BetLimit       uint64                             `protobuf:"varint,5,opt,name=BetLimit,proto3" json:"BetLimit,omitempty"`            // 当前房间下注身上最少要带的钱
	Status         *StatusMsg                         `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`                 //  当前状态
}

func (x *ENTER_GAME_RED2BLACK_RES) Reset() {
	*x = ENTER_GAME_RED2BLACK_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENTER_GAME_RED2BLACK_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENTER_GAME_RED2BLACK_RES) ProtoMessage() {}

func (x *ENTER_GAME_RED2BLACK_RES) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENTER_GAME_RED2BLACK_RES.ProtoReflect.Descriptor instead.
func (*ENTER_GAME_RED2BLACK_RES) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{1}
}

func (x *ENTER_GAME_RED2BLACK_RES) GetRoomID() uint32 {
	if x != nil {
		return x.RoomID
	}
	return 0
}

func (x *ENTER_GAME_RED2BLACK_RES) GetHistoryWinners() []*ENTER_GAME_RED2BLACK_RES_Winner {
	if x != nil {
		return x.HistoryWinners
	}
	return nil
}

func (x *ENTER_GAME_RED2BLACK_RES) GetBets() []int64 {
	if x != nil {
		return x.Bets
	}
	return nil
}

func (x *ENTER_GAME_RED2BLACK_RES) GetShowNum() uint32 {
	if x != nil {
		return x.ShowNum
	}
	return 0
}

func (x *ENTER_GAME_RED2BLACK_RES) GetBetLimit() uint64 {
	if x != nil {
		return x.BetLimit
	}
	return 0
}

func (x *ENTER_GAME_RED2BLACK_RES) GetStatus() *StatusMsg {
	if x != nil {
		return x.Status
	}
	return nil
}

// 请求退出房间
type LEAVE_GAME_RED2BLACK_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID uint32 `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	RoomID    uint32 `protobuf:"varint,2,opt,name=RoomID,proto3" json:"RoomID,omitempty"` // 房间ID
}

func (x *LEAVE_GAME_RED2BLACK_REQ) Reset() {
	*x = LEAVE_GAME_RED2BLACK_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LEAVE_GAME_RED2BLACK_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LEAVE_GAME_RED2BLACK_REQ) ProtoMessage() {}

func (x *LEAVE_GAME_RED2BLACK_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LEAVE_GAME_RED2BLACK_REQ.ProtoReflect.Descriptor instead.
func (*LEAVE_GAME_RED2BLACK_REQ) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{2}
}

func (x *LEAVE_GAME_RED2BLACK_REQ) GetAccountID() uint32 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *LEAVE_GAME_RED2BLACK_REQ) GetRoomID() uint32 {
	if x != nil {
		return x.RoomID
	}
	return 0
}

type LEAVE_GAME_RED2BLACK_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    uint32 `protobuf:"varint,1,opt,name=Ret,proto3" json:"Ret,omitempty"`       // 0.可以退出  1.不能退出房间
	RoomID uint32 `protobuf:"varint,2,opt,name=RoomID,proto3" json:"RoomID,omitempty"` // 房间ID
}

func (x *LEAVE_GAME_RED2BLACK_RES) Reset() {
	*x = LEAVE_GAME_RED2BLACK_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LEAVE_GAME_RED2BLACK_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LEAVE_GAME_RED2BLACK_RES) ProtoMessage() {}

func (x *LEAVE_GAME_RED2BLACK_RES) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LEAVE_GAME_RED2BLACK_RES.ProtoReflect.Descriptor instead.
func (*LEAVE_GAME_RED2BLACK_RES) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{3}
}

func (x *LEAVE_GAME_RED2BLACK_RES) GetRet() uint32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *LEAVE_GAME_RED2BLACK_RES) GetRoomID() uint32 {
	if x != nil {
		return x.RoomID
	}
	return 0
}

////////////////////////////////////////////// 游戏 /////////////////////////////////////////////
// 服务器广播切换状态
type SWITCH_GAME_STATUS_BROADCAST struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextStatus *StatusMsg `protobuf:"bytes,1,opt,name=NextStatus,proto3" json:"NextStatus,omitempty"` // 切换下一个状态
}

func (x *SWITCH_GAME_STATUS_BROADCAST) Reset() {
	*x = SWITCH_GAME_STATUS_BROADCAST{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SWITCH_GAME_STATUS_BROADCAST) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SWITCH_GAME_STATUS_BROADCAST) ProtoMessage() {}

func (x *SWITCH_GAME_STATUS_BROADCAST) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SWITCH_GAME_STATUS_BROADCAST.ProtoReflect.Descriptor instead.
func (*SWITCH_GAME_STATUS_BROADCAST) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{4}
}

func (x *SWITCH_GAME_STATUS_BROADCAST) GetNextStatus() *StatusMsg {
	if x != nil {
		return x.NextStatus
	}
	return nil
}

// 状态结构
type StatusMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           RED2BLACKGAMESTATUS `protobuf:"varint,1,opt,name=Status,proto3,enum=protomsg.RED2BLACKGAMESTATUS" json:"Status,omitempty"`                                                                                           // (1.等待、2.押注、3.停止下注、4.结算)
	Status_StartTime uint64              `protobuf:"varint,2,opt,name=Status_StartTime,json=StatusStartTime,proto3" json:"Status_StartTime,omitempty"`                                                                                    // 状态开始时间						注:(服务器发的所有时间都是 utc+8 时间戳 毫秒)
	Status_EndTime   uint64              `protobuf:"varint,3,opt,name=Status_EndTime,json=StatusEndTime,proto3" json:"Status_EndTime,omitempty"`                                                                                          // 状态到期时间
	RedCards         []*Card             `protobuf:"bytes,4,rep,name=RedCards,proto3" json:"RedCards,omitempty"`                                                                                                                          // 红方 要亮的牌
	BlackCards       []*Card             `protobuf:"bytes,5,rep,name=BlackCards,proto3" json:"BlackCards,omitempty"`                                                                                                                      // 黑方 要亮的牌
	AreaBetVal       map[int32]int64     `protobuf:"bytes,6,rep,name=AreaBetVal,proto3" json:"AreaBetVal,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                            // 3个区域所有人的总押注值
	AreaBetVal_Own   map[int32]int64     `protobuf:"bytes,7,rep,name=AreaBetVal_Own,json=AreaBetValOwn,proto3" json:"AreaBetVal_Own,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 3个区域自己的总押注值
	Status_Data      []byte              `protobuf:"bytes,8,opt,name=Status_Data,json=StatusData,proto3" json:"Status_Data,omitempty"`                                                                                                    // 根据房间状态解析 1.Status_Wait 2.Status_Bet 3.Status_Stop 4.Status_Settle
}

func (x *StatusMsg) Reset() {
	*x = StatusMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusMsg) ProtoMessage() {}

func (x *StatusMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusMsg.ProtoReflect.Descriptor instead.
func (*StatusMsg) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{5}
}

func (x *StatusMsg) GetStatus() RED2BLACKGAMESTATUS {
	if x != nil {
		return x.Status
	}
	return RED2BLACKGAMESTATUS_RED2BLACK_GAMESTATUS_Unknow
}

func (x *StatusMsg) GetStatus_StartTime() uint64 {
	if x != nil {
		return x.Status_StartTime
	}
	return 0
}

func (x *StatusMsg) GetStatus_EndTime() uint64 {
	if x != nil {
		return x.Status_EndTime
	}
	return 0
}

func (x *StatusMsg) GetRedCards() []*Card {
	if x != nil {
		return x.RedCards
	}
	return nil
}

func (x *StatusMsg) GetBlackCards() []*Card {
	if x != nil {
		return x.BlackCards
	}
	return nil
}

func (x *StatusMsg) GetAreaBetVal() map[int32]int64 {
	if x != nil {
		return x.AreaBetVal
	}
	return nil
}

func (x *StatusMsg) GetAreaBetVal_Own() map[int32]int64 {
	if x != nil {
		return x.AreaBetVal_Own
	}
	return nil
}

func (x *StatusMsg) GetStatus_Data() []byte {
	if x != nil {
		return x.Status_Data
	}
	return nil
}

// 1.等待
type Status_Wait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Status_Wait) Reset() {
	*x = Status_Wait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status_Wait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status_Wait) ProtoMessage() {}

func (x *Status_Wait) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status_Wait.ProtoReflect.Descriptor instead.
func (*Status_Wait) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{6}
}

// 2.押注
type Status_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Status_Bet) Reset() {
	*x = Status_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status_Bet) ProtoMessage() {}

func (x *Status_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status_Bet.ProtoReflect.Descriptor instead.
func (*Status_Bet) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{7}
}

// 3.停止下注
type Status_Stop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Status_Stop) Reset() {
	*x = Status_Stop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status_Stop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status_Stop) ProtoMessage() {}

func (x *Status_Stop) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status_Stop.ProtoReflect.Descriptor instead.
func (*Status_Stop) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{8}
}

// 4.结算
type Status_Settle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinArea      RED2BLACKAREA     `protobuf:"varint,1,opt,name=WinArea,proto3,enum=protomsg.RED2BLACKAREA" json:"WinArea,omitempty"`                                                              // 获胜区域 (只可能是红 或 黑 不会出现0 和 3)
	WinCardType  RED2BLACKCARDTYPE `protobuf:"varint,2,opt,name=WinCardType,proto3,enum=protomsg.RED2BLACKCARDTYPE" json:"WinCardType,omitempty"`                                                  // 获胜区域牌型
	LossCardType RED2BLACKCARDTYPE `protobuf:"varint,3,opt,name=LossCardType,proto3,enum=protomsg.RED2BLACKCARDTYPE" json:"LossCardType,omitempty"`                                                // 失败区域牌型
	WinOdds      uint64            `protobuf:"varint,4,opt,name=winOdds,proto3" json:"winOdds,omitempty"`                                                                                          // 获胜方的牌型赔率
	Players      map[int32]int64   `protobuf:"bytes,5,rep,name=Players,proto3" json:"Players,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 所有盈利的玩家 key:AccountID val:获利 (不包含本金)
}

func (x *Status_Settle) Reset() {
	*x = Status_Settle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status_Settle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status_Settle) ProtoMessage() {}

func (x *Status_Settle) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status_Settle.ProtoReflect.Descriptor instead.
func (*Status_Settle) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{9}
}

func (x *Status_Settle) GetWinArea() RED2BLACKAREA {
	if x != nil {
		return x.WinArea
	}
	return RED2BLACKAREA_RED2BLACK_AREA_Unknow
}

func (x *Status_Settle) GetWinCardType() RED2BLACKCARDTYPE {
	if x != nil {
		return x.WinCardType
	}
	return RED2BLACKCARDTYPE_RED2BLACK_CARDTYPE_Unknow
}

func (x *Status_Settle) GetLossCardType() RED2BLACKCARDTYPE {
	if x != nil {
		return x.LossCardType
	}
	return RED2BLACKCARDTYPE_RED2BLACK_CARDTYPE_Unknow
}

func (x *Status_Settle) GetWinOdds() uint64 {
	if x != nil {
		return x.WinOdds
	}
	return 0
}

func (x *Status_Settle) GetPlayers() map[int32]int64 {
	if x != nil {
		return x.Players
	}
	return nil
}

// 请求下注
type BET_RED2BLACK_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID uint32        `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`                   // 客户端可发可不发,机器人下注用
	Area      RED2BLACKAREA `protobuf:"varint,2,opt,name=Area,proto3,enum=protomsg.RED2BLACKAREA" json:"Area,omitempty"` // 下注区域
	Bet       uint64        `protobuf:"varint,3,opt,name=Bet,proto3" json:"Bet,omitempty"`                               // 下注的筹码
	BetType   uint32        `protobuf:"varint,4,opt,name=BetType,proto3" json:"BetType,omitempty"`                       // 0 正常押注，1 续押
}

func (x *BET_RED2BLACK_REQ) Reset() {
	*x = BET_RED2BLACK_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BET_RED2BLACK_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BET_RED2BLACK_REQ) ProtoMessage() {}

func (x *BET_RED2BLACK_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BET_RED2BLACK_REQ.ProtoReflect.Descriptor instead.
func (*BET_RED2BLACK_REQ) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{10}
}

func (x *BET_RED2BLACK_REQ) GetAccountID() uint32 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *BET_RED2BLACK_REQ) GetArea() RED2BLACKAREA {
	if x != nil {
		return x.Area
	}
	return RED2BLACKAREA_RED2BLACK_AREA_Unknow
}

func (x *BET_RED2BLACK_REQ) GetBet() uint64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *BET_RED2BLACK_REQ) GetBetType() uint32 {
	if x != nil {
		return x.BetType
	}
	return 0
}

// 间隔 200 毫秒一次 广播玩家下注
type BET_RED2BLACK_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players    []*BET_RED2BLACK_RES_BetPlayer `protobuf:"bytes,1,rep,name=Players,proto3" json:"Players,omitempty"`                                                                                                 // 间隔时间内，所有玩家的下注
	AreaBetVal map[int32]int64                `protobuf:"bytes,2,rep,name=AreaBetVal,proto3" json:"AreaBetVal,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 3个区域的押注值
}

func (x *BET_RED2BLACK_RES) Reset() {
	*x = BET_RED2BLACK_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BET_RED2BLACK_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BET_RED2BLACK_RES) ProtoMessage() {}

func (x *BET_RED2BLACK_RES) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BET_RED2BLACK_RES.ProtoReflect.Descriptor instead.
func (*BET_RED2BLACK_RES) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{11}
}

func (x *BET_RED2BLACK_RES) GetPlayers() []*BET_RED2BLACK_RES_BetPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *BET_RED2BLACK_RES) GetAreaBetVal() map[int32]int64 {
	if x != nil {
		return x.AreaBetVal
	}
	return nil
}

// 请求清除下注
type CLEAN_BET_RED2BLACK_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID uint32 `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"` // 客户端可发可不发,机器人下注用
}

func (x *CLEAN_BET_RED2BLACK_REQ) Reset() {
	*x = CLEAN_BET_RED2BLACK_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLEAN_BET_RED2BLACK_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLEAN_BET_RED2BLACK_REQ) ProtoMessage() {}

func (x *CLEAN_BET_RED2BLACK_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLEAN_BET_RED2BLACK_REQ.ProtoReflect.Descriptor instead.
func (*CLEAN_BET_RED2BLACK_REQ) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{12}
}

func (x *CLEAN_BET_RED2BLACK_REQ) GetAccountID() uint32 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

// 服务器广播清除下注
type CLEAN_BET_RED2BLACK_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID        uint32          `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`                                                                                                        // 清除的玩家
	PlayerAreaBetVal map[int32]int64 `protobuf:"bytes,2,rep,name=PlayerAreaBetVal,proto3" json:"PlayerAreaBetVal,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 玩家个人清除之前总押注值
	AreaBetVal       map[int32]int64 `protobuf:"bytes,3,rep,name=AreaBetVal,proto3" json:"AreaBetVal,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`             // 3个区域所有人的总押注值
}

func (x *CLEAN_BET_RED2BLACK_RES) Reset() {
	*x = CLEAN_BET_RED2BLACK_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLEAN_BET_RED2BLACK_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLEAN_BET_RED2BLACK_RES) ProtoMessage() {}

func (x *CLEAN_BET_RED2BLACK_RES) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLEAN_BET_RED2BLACK_RES.ProtoReflect.Descriptor instead.
func (*CLEAN_BET_RED2BLACK_RES) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{13}
}

func (x *CLEAN_BET_RED2BLACK_RES) GetAccountID() uint32 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *CLEAN_BET_RED2BLACK_RES) GetPlayerAreaBetVal() map[int32]int64 {
	if x != nil {
		return x.PlayerAreaBetVal
	}
	return nil
}

func (x *CLEAN_BET_RED2BLACK_RES) GetAreaBetVal() map[int32]int64 {
	if x != nil {
		return x.AreaBetVal
	}
	return nil
}

// 请求RED2BLACK玩家列表
type PLAYERS_RED2BLACK_LIST_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*AccountStorageData `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"` // 房间内所有的玩家
}

func (x *PLAYERS_RED2BLACK_LIST_RES) Reset() {
	*x = PLAYERS_RED2BLACK_LIST_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PLAYERS_RED2BLACK_LIST_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PLAYERS_RED2BLACK_LIST_RES) ProtoMessage() {}

func (x *PLAYERS_RED2BLACK_LIST_RES) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PLAYERS_RED2BLACK_LIST_RES.ProtoReflect.Descriptor instead.
func (*PLAYERS_RED2BLACK_LIST_RES) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{14}
}

func (x *PLAYERS_RED2BLACK_LIST_RES) GetPlayers() []*AccountStorageData {
	if x != nil {
		return x.Players
	}
	return nil
}

type ENTER_GAME_RED2BLACK_RES_Winner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinArea     RED2BLACKAREA     `protobuf:"varint,1,opt,name=WinArea,proto3,enum=protomsg.RED2BLACKAREA" json:"WinArea,omitempty"`             // 获胜区域 (只可能是红 或 黑 不会出现0 和 3)
	WinCardType RED2BLACKCARDTYPE `protobuf:"varint,2,opt,name=WinCardType,proto3,enum=protomsg.RED2BLACKCARDTYPE" json:"WinCardType,omitempty"` // 获胜牌型
}

func (x *ENTER_GAME_RED2BLACK_RES_Winner) Reset() {
	*x = ENTER_GAME_RED2BLACK_RES_Winner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENTER_GAME_RED2BLACK_RES_Winner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENTER_GAME_RED2BLACK_RES_Winner) ProtoMessage() {}

func (x *ENTER_GAME_RED2BLACK_RES_Winner) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENTER_GAME_RED2BLACK_RES_Winner.ProtoReflect.Descriptor instead.
func (*ENTER_GAME_RED2BLACK_RES_Winner) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ENTER_GAME_RED2BLACK_RES_Winner) GetWinArea() RED2BLACKAREA {
	if x != nil {
		return x.WinArea
	}
	return RED2BLACKAREA_RED2BLACK_AREA_Unknow
}

func (x *ENTER_GAME_RED2BLACK_RES_Winner) GetWinCardType() RED2BLACKCARDTYPE {
	if x != nil {
		return x.WinCardType
	}
	return RED2BLACKCARDTYPE_RED2BLACK_CARDTYPE_Unknow
}

type BET_RED2BLACK_RES_BetPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID uint32        `protobuf:"varint,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Area      RED2BLACKAREA `protobuf:"varint,2,opt,name=Area,proto3,enum=protomsg.RED2BLACKAREA" json:"Area,omitempty"` // 下注区域
	Bet       uint64        `protobuf:"varint,3,opt,name=Bet,proto3" json:"Bet,omitempty"`                               // 下注的筹码
}

func (x *BET_RED2BLACK_RES_BetPlayer) Reset() {
	*x = BET_RED2BLACK_RES_BetPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_red2black_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BET_RED2BLACK_RES_BetPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BET_RED2BLACK_RES_BetPlayer) ProtoMessage() {}

func (x *BET_RED2BLACK_RES_BetPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_red2black_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BET_RED2BLACK_RES_BetPlayer.ProtoReflect.Descriptor instead.
func (*BET_RED2BLACK_RES_BetPlayer) Descriptor() ([]byte, []int) {
	return file_protobuf_red2black_proto_rawDescGZIP(), []int{11, 0}
}

func (x *BET_RED2BLACK_RES_BetPlayer) GetAccountID() uint32 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *BET_RED2BLACK_RES_BetPlayer) GetArea() RED2BLACKAREA {
	if x != nil {
		return x.Area
	}
	return RED2BLACKAREA_RED2BLACK_AREA_Unknow
}

func (x *BET_RED2BLACK_RES_BetPlayer) GetBet() uint64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

var File_protobuf_red2black_proto protoreflect.FileDescriptor

var file_protobuf_red2black_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x64, 0x32, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6d, 0x73, 0x67, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x18, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x22, 0xf8, 0x02, 0x0a, 0x18,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x12, 0x51, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x57, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6d, 0x73, 0x67, 0x2e, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52,
	0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x2e, 0x57, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x52, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x57, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x4e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x75,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x73, 0x67, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x7a, 0x0a, 0x06, 0x57, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67,
	0x2e, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x41, 0x52, 0x45, 0x41, 0x52, 0x07,
	0x57, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x3d, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x43, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x57, 0x69, 0x6e, 0x43, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x50, 0x0a, 0x18, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52,
	0x45, 0x51, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x18, 0x4c, 0x45, 0x41, 0x56,
	0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x53, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x22, 0x53,
	0x0a, 0x1c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x12, 0x33,
	0x0a, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xa6, 0x04, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73,
	0x67, 0x12, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x52, 0x45, 0x44,
	0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x52, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x52, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x2e,
	0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x0e, 0x41,
	0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x5f, 0x4f, 0x77, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x41, 0x72, 0x65,
	0x61, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3d, 0x0a, 0x0f, 0x41,
	0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x41, 0x72,
	0x65, 0x61, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0d, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x22, 0x0c, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x42, 0x65, 0x74, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x22, 0xd8, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x57, 0x69,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b,
	0x41, 0x52, 0x45, 0x41, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x3d, 0x0a,
	0x0b, 0x57, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x52, 0x45,
	0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x0b, 0x57, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0c,
	0x4c, 0x6f, 0x73, 0x73, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x52, 0x45,
	0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x0c, 0x4c, 0x6f, 0x73, 0x73, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x69, 0x6e, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x77, 0x69, 0x6e, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6d, 0x73, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x32,
	0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67,
	0x2e, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x41, 0x52, 0x45, 0x41, 0x52, 0x04,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x42, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xca, 0x02, 0x0a, 0x11, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41,
	0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x3f, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d,
	0x73, 0x67, 0x2e, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x53, 0x2e, 0x42, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x41, 0x72, 0x65, 0x61, 0x42,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x1a, 0x68, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x2b, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41,
	0x43, 0x4b, 0x41, 0x52, 0x45, 0x41, 0x52, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x42, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x42, 0x65, 0x74, 0x1a, 0x3d,
	0x0a, 0x0f, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a,
	0x17, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xf3, 0x02, 0x0a, 0x17, 0x43, 0x4c, 0x45, 0x41, 0x4e,
	0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52,
	0x45, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x63, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x42, 0x45, 0x54, 0x5f,
	0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x42,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x51, 0x0a, 0x0a, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x2e, 0x41, 0x72, 0x65,
	0x61, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x41, 0x72,
	0x65, 0x61, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x1a, 0x43, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a,
	0x0f, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54, 0x0a, 0x1a,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x2a, 0x92, 0x03, 0x0a, 0x0c, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b,
	0x4d, 0x53, 0x47, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x5f, 0x52, 0x45,
	0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x53, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x81, 0x7d, 0x12, 0x20, 0x0a, 0x1b, 0x53,
	0x43, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x44,
	0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x82, 0x7d, 0x12, 0x20, 0x0a,
	0x1b, 0x43, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52,
	0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x83, 0x7d, 0x12,
	0x20, 0x0a, 0x1b, 0x53, 0x43, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x84,
	0x7d, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x53, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x32,
	0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x88, 0x7d, 0x12, 0x19, 0x0a, 0x14,
	0x53, 0x43, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0x89, 0x7d, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x53, 0x5f, 0x43, 0x4c,
	0x45, 0x41, 0x4e, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x8a, 0x7d, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x43, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41,
	0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x8b, 0x7d, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x53, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x8f, 0x7d, 0x12, 0x22, 0x0a,
	0x1d, 0x53, 0x43, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x44, 0x32,
	0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x90,
	0x7d, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x43, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44,
	0x43, 0x41, 0x53, 0x54, 0x10, 0x94, 0x7d, 0x2a, 0x75, 0x0a, 0x0d, 0x52, 0x45, 0x44, 0x32, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x41, 0x52, 0x45, 0x41, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x44, 0x32,
	0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b,
	0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x42, 0x4c,
	0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41,
	0x43, 0x4b, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x10, 0x03, 0x2a, 0xe8,
	0x01, 0x0a, 0x11, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x43, 0x41, 0x52, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x44, 0x32, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x33, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x35, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41,
	0x43, 0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x36, 0x10, 0x06, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x37, 0x10, 0x07, 0x2a, 0xb3, 0x01, 0x0a, 0x13, 0x52, 0x45,
	0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x45, 0x54, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x1f,
	0x0a, 0x1b, 0x52, 0x45, 0x44, 0x32, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x04, 0x42,
	0x0f, 0x5a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x73, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_red2black_proto_rawDescOnce sync.Once
	file_protobuf_red2black_proto_rawDescData = file_protobuf_red2black_proto_rawDesc
)

func file_protobuf_red2black_proto_rawDescGZIP() []byte {
	file_protobuf_red2black_proto_rawDescOnce.Do(func() {
		file_protobuf_red2black_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_red2black_proto_rawDescData)
	})
	return file_protobuf_red2black_proto_rawDescData
}

var file_protobuf_red2black_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_protobuf_red2black_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_protobuf_red2black_proto_goTypes = []interface{}{
	(RED2BLACKMSG)(0),                       // 0: protomsg.RED2BLACKMSG
	(RED2BLACKAREA)(0),                      // 1: protomsg.RED2BLACKAREA
	(RED2BLACKCARDTYPE)(0),                  // 2: protomsg.RED2BLACKCARDTYPE
	(RED2BLACKGAMESTATUS)(0),                // 3: protomsg.RED2BLACKGAMESTATUS
	(*ENTER_GAME_RED2BLACK_REQ)(nil),        // 4: protomsg.ENTER_GAME_RED2BLACK_REQ
	(*ENTER_GAME_RED2BLACK_RES)(nil),        // 5: protomsg.ENTER_GAME_RED2BLACK_RES
	(*LEAVE_GAME_RED2BLACK_REQ)(nil),        // 6: protomsg.LEAVE_GAME_RED2BLACK_REQ
	(*LEAVE_GAME_RED2BLACK_RES)(nil),        // 7: protomsg.LEAVE_GAME_RED2BLACK_RES
	(*SWITCH_GAME_STATUS_BROADCAST)(nil),    // 8: protomsg.SWITCH_GAME_STATUS_BROADCAST
	(*StatusMsg)(nil),                       // 9: protomsg.StatusMsg
	(*Status_Wait)(nil),                     // 10: protomsg.Status_Wait
	(*Status_Bet)(nil),                      // 11: protomsg.Status_Bet
	(*Status_Stop)(nil),                     // 12: protomsg.Status_Stop
	(*Status_Settle)(nil),                   // 13: protomsg.Status_Settle
	(*BET_RED2BLACK_REQ)(nil),               // 14: protomsg.BET_RED2BLACK_REQ
	(*BET_RED2BLACK_RES)(nil),               // 15: protomsg.BET_RED2BLACK_RES
	(*CLEAN_BET_RED2BLACK_REQ)(nil),         // 16: protomsg.CLEAN_BET_RED2BLACK_REQ
	(*CLEAN_BET_RED2BLACK_RES)(nil),         // 17: protomsg.CLEAN_BET_RED2BLACK_RES
	(*PLAYERS_RED2BLACK_LIST_RES)(nil),      // 18: protomsg.PLAYERS_RED2BLACK_LIST_RES
	(*ENTER_GAME_RED2BLACK_RES_Winner)(nil), // 19: protomsg.ENTER_GAME_RED2BLACK_RES.Winner
	nil,                                     // 20: protomsg.StatusMsg.AreaBetValEntry
	nil,                                     // 21: protomsg.StatusMsg.AreaBetValOwnEntry
	nil,                                     // 22: protomsg.Status_Settle.PlayersEntry
	(*BET_RED2BLACK_RES_BetPlayer)(nil),     // 23: protomsg.BET_RED2BLACK_RES.BetPlayer
	nil,                                     // 24: protomsg.BET_RED2BLACK_RES.AreaBetValEntry
	nil,                                     // 25: protomsg.CLEAN_BET_RED2BLACK_RES.PlayerAreaBetValEntry
	nil,                                     // 26: protomsg.CLEAN_BET_RED2BLACK_RES.AreaBetValEntry
	(*Card)(nil),                            // 27: protomsg.Card
	(*AccountStorageData)(nil),              // 28: protomsg.AccountStorageData
}
var file_protobuf_red2black_proto_depIdxs = []int32{
	19, // 0: protomsg.ENTER_GAME_RED2BLACK_RES.HistoryWinners:type_name -> protomsg.ENTER_GAME_RED2BLACK_RES.Winner
	9,  // 1: protomsg.ENTER_GAME_RED2BLACK_RES.Status:type_name -> protomsg.StatusMsg
	9,  // 2: protomsg.SWITCH_GAME_STATUS_BROADCAST.NextStatus:type_name -> protomsg.StatusMsg
	3,  // 3: protomsg.StatusMsg.Status:type_name -> protomsg.RED2BLACKGAMESTATUS
	27, // 4: protomsg.StatusMsg.RedCards:type_name -> protomsg.Card
	27, // 5: protomsg.StatusMsg.BlackCards:type_name -> protomsg.Card
	20, // 6: protomsg.StatusMsg.AreaBetVal:type_name -> protomsg.StatusMsg.AreaBetValEntry
	21, // 7: protomsg.StatusMsg.AreaBetVal_Own:type_name -> protomsg.StatusMsg.AreaBetValOwnEntry
	1,  // 8: protomsg.Status_Settle.WinArea:type_name -> protomsg.RED2BLACKAREA
	2,  // 9: protomsg.Status_Settle.WinCardType:type_name -> protomsg.RED2BLACKCARDTYPE
	2,  // 10: protomsg.Status_Settle.LossCardType:type_name -> protomsg.RED2BLACKCARDTYPE
	22, // 11: protomsg.Status_Settle.Players:type_name -> protomsg.Status_Settle.PlayersEntry
	1,  // 12: protomsg.BET_RED2BLACK_REQ.Area:type_name -> protomsg.RED2BLACKAREA
	23, // 13: protomsg.BET_RED2BLACK_RES.Players:type_name -> protomsg.BET_RED2BLACK_RES.BetPlayer
	24, // 14: protomsg.BET_RED2BLACK_RES.AreaBetVal:type_name -> protomsg.BET_RED2BLACK_RES.AreaBetValEntry
	25, // 15: protomsg.CLEAN_BET_RED2BLACK_RES.PlayerAreaBetVal:type_name -> protomsg.CLEAN_BET_RED2BLACK_RES.PlayerAreaBetValEntry
	26, // 16: protomsg.CLEAN_BET_RED2BLACK_RES.AreaBetVal:type_name -> protomsg.CLEAN_BET_RED2BLACK_RES.AreaBetValEntry
	28, // 17: protomsg.PLAYERS_RED2BLACK_LIST_RES.players:type_name -> protomsg.AccountStorageData
	1,  // 18: protomsg.ENTER_GAME_RED2BLACK_RES.Winner.WinArea:type_name -> protomsg.RED2BLACKAREA
	2,  // 19: protomsg.ENTER_GAME_RED2BLACK_RES.Winner.WinCardType:type_name -> protomsg.RED2BLACKCARDTYPE
	1,  // 20: protomsg.BET_RED2BLACK_RES.BetPlayer.Area:type_name -> protomsg.RED2BLACKAREA
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_protobuf_red2black_proto_init() }
func file_protobuf_red2black_proto_init() {
	if File_protobuf_red2black_proto != nil {
		return
	}
	file_protobuf_data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protobuf_red2black_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENTER_GAME_RED2BLACK_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENTER_GAME_RED2BLACK_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LEAVE_GAME_RED2BLACK_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LEAVE_GAME_RED2BLACK_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SWITCH_GAME_STATUS_BROADCAST); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status_Wait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status_Stop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status_Settle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BET_RED2BLACK_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BET_RED2BLACK_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLEAN_BET_RED2BLACK_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLEAN_BET_RED2BLACK_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PLAYERS_RED2BLACK_LIST_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENTER_GAME_RED2BLACK_RES_Winner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_red2black_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BET_RED2BLACK_RES_BetPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_red2black_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_red2black_proto_goTypes,
		DependencyIndexes: file_protobuf_red2black_proto_depIdxs,
		EnumInfos:         file_protobuf_red2black_proto_enumTypes,
		MessageInfos:      file_protobuf_red2black_proto_msgTypes,
	}.Build()
	File_protobuf_red2black_proto = out.File
	file_protobuf_red2black_proto_rawDesc = nil
	file_protobuf_red2black_proto_goTypes = nil
	file_protobuf_red2black_proto_depIdxs = nil
}
