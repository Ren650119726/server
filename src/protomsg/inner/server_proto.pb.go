// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/server/server_proto.proto

/*
Package inner is a generated protocol buffer package.

It is generated from these files:
	protobuf/server/server_proto.proto

It has these top-level messages:
	SQL_SYNTAX
	ALL_ACCOUNT_RESP
	ALL_WATER_LINE
	ALL_EMAIL_RESP
	SAVE_ACCOUNT
	SAVE_EMAIL_PERSON
	SAVE_WATER_LINE
*/
package inner

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protomsg "root/protomsg"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SERVERMSG int32

const (
	SERVERMSG_UNKNOW               SERVERMSG = 0
	SERVERMSG_HD_HELLO_DB          SERVERMSG = 100
	SERVERMSG_SS_TEST_NETWORK      SERVERMSG = 101
	SERVERMSG_HD_ALL_DATA          SERVERMSG = 105
	SERVERMSG_DH_ALL_ACCOUNT_RESP  SERVERMSG = 106
	SERVERMSG_DH_ALL_EMAIL_RESP    SERVERMSG = 107
	SERVERMSG_DH_ALL_WATER_LINE    SERVERMSG = 108
	SERVERMSG_DH_FINISH_DATA       SERVERMSG = 120
	SERVERMSG_HD_SQL_SYNTAX        SERVERMSG = 131
	SERVERMSG_HD_SAVE_ACCOUNT      SERVERMSG = 135
	SERVERMSG_HD_SAVE_EMAIL_PERSON SERVERMSG = 136
	SERVERMSG_HD_SAVE_WATER_LINE   SERVERMSG = 137
	SERVERMSG_HD_SAVE_ALL          SERVERMSG = 150
)

var SERVERMSG_name = map[int32]string{
	0:   "UNKNOW",
	100: "HD_HELLO_DB",
	101: "SS_TEST_NETWORK",
	105: "HD_ALL_DATA",
	106: "DH_ALL_ACCOUNT_RESP",
	107: "DH_ALL_EMAIL_RESP",
	108: "DH_ALL_WATER_LINE",
	120: "DH_FINISH_DATA",
	131: "HD_SQL_SYNTAX",
	135: "HD_SAVE_ACCOUNT",
	136: "HD_SAVE_EMAIL_PERSON",
	137: "HD_SAVE_WATER_LINE",
	150: "HD_SAVE_ALL",
}
var SERVERMSG_value = map[string]int32{
	"UNKNOW":               0,
	"HD_HELLO_DB":          100,
	"SS_TEST_NETWORK":      101,
	"HD_ALL_DATA":          105,
	"DH_ALL_ACCOUNT_RESP":  106,
	"DH_ALL_EMAIL_RESP":    107,
	"DH_ALL_WATER_LINE":    108,
	"DH_FINISH_DATA":       120,
	"HD_SQL_SYNTAX":        131,
	"HD_SAVE_ACCOUNT":      135,
	"HD_SAVE_EMAIL_PERSON": 136,
	"HD_SAVE_WATER_LINE":   137,
	"HD_SAVE_ALL":          150,
}

func (x SERVERMSG) String() string {
	return proto.EnumName(SERVERMSG_name, int32(x))
}
func (SERVERMSG) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 发送到db执行 sql syntax
type SQL_SYNTAX struct {
	DataBaseType uint32 `protobuf:"varint,1,opt,name=DataBaseType" json:"DataBaseType,omitempty"`
	SQLSyntax    string `protobuf:"bytes,2,opt,name=SQLSyntax" json:"SQLSyntax,omitempty"`
}

func (m *SQL_SYNTAX) Reset()                    { *m = SQL_SYNTAX{} }
func (m *SQL_SYNTAX) String() string            { return proto.CompactTextString(m) }
func (*SQL_SYNTAX) ProtoMessage()               {}
func (*SQL_SYNTAX) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SQL_SYNTAX) GetDataBaseType() uint32 {
	if m != nil {
		return m.DataBaseType
	}
	return 0
}

func (m *SQL_SYNTAX) GetSQLSyntax() string {
	if m != nil {
		return m.SQLSyntax
	}
	return ""
}

// 请求账号信息
type ALL_ACCOUNT_RESP struct {
	AllAccount []*protomsg.AccountStorageData `protobuf:"bytes,1,rep,name=AllAccount" json:"AllAccount,omitempty"`
}

func (m *ALL_ACCOUNT_RESP) Reset()                    { *m = ALL_ACCOUNT_RESP{} }
func (m *ALL_ACCOUNT_RESP) String() string            { return proto.CompactTextString(m) }
func (*ALL_ACCOUNT_RESP) ProtoMessage()               {}
func (*ALL_ACCOUNT_RESP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ALL_ACCOUNT_RESP) GetAllAccount() []*protomsg.AccountStorageData {
	if m != nil {
		return m.AllAccount
	}
	return nil
}

// db返回所有水位线
type ALL_WATER_LINE struct {
	Line []*SAVE_WATER_LINE `protobuf:"bytes,1,rep,name=Line" json:"Line,omitempty"`
}

func (m *ALL_WATER_LINE) Reset()                    { *m = ALL_WATER_LINE{} }
func (m *ALL_WATER_LINE) String() string            { return proto.CompactTextString(m) }
func (*ALL_WATER_LINE) ProtoMessage()               {}
func (*ALL_WATER_LINE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ALL_WATER_LINE) GetLine() []*SAVE_WATER_LINE {
	if m != nil {
		return m.Line
	}
	return nil
}

// 请求邮件信息
type ALL_EMAIL_RESP struct {
	AcccountMail []*SAVE_EMAIL_PERSON `protobuf:"bytes,1,rep,name=AcccountMail" json:"AcccountMail,omitempty"`
}

func (m *ALL_EMAIL_RESP) Reset()                    { *m = ALL_EMAIL_RESP{} }
func (m *ALL_EMAIL_RESP) String() string            { return proto.CompactTextString(m) }
func (*ALL_EMAIL_RESP) ProtoMessage()               {}
func (*ALL_EMAIL_RESP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ALL_EMAIL_RESP) GetAcccountMail() []*SAVE_EMAIL_PERSON {
	if m != nil {
		return m.AcccountMail
	}
	return nil
}

// 回存玩家
type SAVE_ACCOUNT struct {
	AccData *protomsg.AccountStorageData `protobuf:"bytes,1,opt,name=AccData" json:"AccData,omitempty"`
}

func (m *SAVE_ACCOUNT) Reset()                    { *m = SAVE_ACCOUNT{} }
func (m *SAVE_ACCOUNT) String() string            { return proto.CompactTextString(m) }
func (*SAVE_ACCOUNT) ProtoMessage()               {}
func (*SAVE_ACCOUNT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SAVE_ACCOUNT) GetAccData() *protomsg.AccountStorageData {
	if m != nil {
		return m.AccData
	}
	return nil
}

// 回存邮件
type SAVE_EMAIL_PERSON struct {
	AccountId uint32            `protobuf:"varint,1,opt,name=AccountId" json:"AccountId,omitempty"`
	Emails    []*protomsg.Email `protobuf:"bytes,2,rep,name=Emails" json:"Emails,omitempty"`
}

func (m *SAVE_EMAIL_PERSON) Reset()                    { *m = SAVE_EMAIL_PERSON{} }
func (m *SAVE_EMAIL_PERSON) String() string            { return proto.CompactTextString(m) }
func (*SAVE_EMAIL_PERSON) ProtoMessage()               {}
func (*SAVE_EMAIL_PERSON) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SAVE_EMAIL_PERSON) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *SAVE_EMAIL_PERSON) GetEmails() []*protomsg.Email {
	if m != nil {
		return m.Emails
	}
	return nil
}

// 回存水位线
type SAVE_WATER_LINE struct {
	ServerID  uint32 `protobuf:"varint,1,opt,name=ServerID" json:"ServerID,omitempty"`
	GameType  uint32 `protobuf:"varint,2,opt,name=GameType" json:"GameType,omitempty"`
	WaterLine string `protobuf:"bytes,3,opt,name=WaterLine" json:"WaterLine,omitempty"`
}

func (m *SAVE_WATER_LINE) Reset()                    { *m = SAVE_WATER_LINE{} }
func (m *SAVE_WATER_LINE) String() string            { return proto.CompactTextString(m) }
func (*SAVE_WATER_LINE) ProtoMessage()               {}
func (*SAVE_WATER_LINE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SAVE_WATER_LINE) GetServerID() uint32 {
	if m != nil {
		return m.ServerID
	}
	return 0
}

func (m *SAVE_WATER_LINE) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *SAVE_WATER_LINE) GetWaterLine() string {
	if m != nil {
		return m.WaterLine
	}
	return ""
}

func init() {
	proto.RegisterType((*SQL_SYNTAX)(nil), "protomsg.SQL_SYNTAX")
	proto.RegisterType((*ALL_ACCOUNT_RESP)(nil), "protomsg.ALL_ACCOUNT_RESP")
	proto.RegisterType((*ALL_WATER_LINE)(nil), "protomsg.ALL_WATER_LINE")
	proto.RegisterType((*ALL_EMAIL_RESP)(nil), "protomsg.ALL_EMAIL_RESP")
	proto.RegisterType((*SAVE_ACCOUNT)(nil), "protomsg.SAVE_ACCOUNT")
	proto.RegisterType((*SAVE_EMAIL_PERSON)(nil), "protomsg.SAVE_EMAIL_PERSON")
	proto.RegisterType((*SAVE_WATER_LINE)(nil), "protomsg.SAVE_WATER_LINE")
	proto.RegisterEnum("protomsg.SERVERMSG", SERVERMSG_name, SERVERMSG_value)
}

func init() { proto.RegisterFile("protobuf/server/server_proto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x4f, 0xdb, 0x40,
	0x14, 0xac, 0x43, 0x45, 0xc9, 0x23, 0x90, 0xe5, 0x05, 0x44, 0xa0, 0x1c, 0x22, 0x5f, 0x1a, 0x55,
	0x6a, 0x22, 0xb5, 0x52, 0x4f, 0x95, 0xd0, 0x06, 0x2f, 0xd8, 0xc2, 0x71, 0x92, 0x5d, 0x43, 0x5a,
	0x2e, 0x2b, 0x93, 0xb8, 0x51, 0xda, 0x24, 0x46, 0x8e, 0xa9, 0xe0, 0xdc, 0x43, 0xdb, 0x3f, 0x50,
	0xa9, 0xff, 0xb6, 0xf2, 0xda, 0x8e, 0x4d, 0x7a, 0xe8, 0xc5, 0xd6, 0xce, 0xcc, 0xce, 0xfb, 0x98,
	0x05, 0xfd, 0x2e, 0x0c, 0xa2, 0xe0, 0xf6, 0xfe, 0x73, 0x7b, 0xe9, 0x87, 0xdf, 0xfc, 0x30, 0xfd,
	0x49, 0x05, 0xb7, 0xd4, 0x17, 0xb7, 0xd4, 0x6f, 0xbe, 0x9c, 0x1c, 0xd7, 0x56, 0xea, 0xb1, 0x17,
	0x79, 0x09, 0xad, 0x3b, 0x00, 0x62, 0x60, 0x4b, 0xf1, 0xc9, 0x71, 0xe9, 0x47, 0xd4, 0xa1, 0x62,
	0x78, 0x91, 0xd7, 0xf1, 0x96, 0xbe, 0xfb, 0x78, 0xe7, 0xd7, 0xb5, 0x86, 0xd6, 0xdc, 0xe1, 0x4f,
	0x30, 0x3c, 0x81, 0xb2, 0x18, 0xd8, 0xe2, 0x71, 0x11, 0x79, 0x0f, 0xf5, 0x52, 0x43, 0x6b, 0x96,
	0x79, 0x0e, 0xe8, 0x7d, 0x20, 0xd4, 0xb6, 0x25, 0x3d, 0x3b, 0xeb, 0x5d, 0x39, 0xae, 0xe4, 0x4c,
	0xf4, 0xf1, 0x03, 0x00, 0x9d, 0xcd, 0xe8, 0x68, 0x14, 0xdc, 0x2f, 0xa2, 0xba, 0xd6, 0xd8, 0x68,
	0x6e, 0xbf, 0x3d, 0x69, 0x65, 0x7d, 0xb5, 0x52, 0x42, 0x44, 0x41, 0xe8, 0x4d, 0xfc, 0xb8, 0x16,
	0x2f, 0xe8, 0xf5, 0x53, 0xd8, 0x8d, 0x1d, 0x87, 0xd4, 0x65, 0x5c, 0xda, 0x96, 0xc3, 0xf0, 0x0d,
	0x3c, 0xb7, 0xa7, 0x0b, 0x3f, 0x75, 0x3a, 0xca, 0x9d, 0x04, 0xbd, 0x66, 0x05, 0x21, 0x57, 0x32,
	0x7d, 0x90, 0x18, 0xb0, 0x2e, 0xb5, 0xec, 0xa4, 0xa1, 0x53, 0xa8, 0xd0, 0x51, 0x62, 0xdf, 0xf5,
	0xa6, 0xb3, 0xd4, 0xe8, 0xe5, 0x9a, 0x51, 0x72, 0xa1, 0xcf, 0xb8, 0xe8, 0x39, 0xfc, 0xc9, 0x05,
	0xfd, 0x1c, 0x2a, 0x4a, 0x92, 0x8e, 0x89, 0xef, 0xe1, 0x05, 0x1d, 0x8d, 0xe2, 0xd6, 0xd5, 0xca,
	0xfe, 0x37, 0x5e, 0x26, 0xd6, 0x6f, 0x60, 0xef, 0x9f, 0x52, 0xf1, 0x82, 0xd3, 0x3b, 0xd6, 0x38,
	0x4d, 0x20, 0x07, 0xf0, 0x15, 0x6c, 0xb2, 0xb9, 0x37, 0x9d, 0x2d, 0xeb, 0x25, 0xd5, 0x75, 0x35,
	0xaf, 0xa4, 0x70, 0x9e, 0xd2, 0xfa, 0x04, 0xaa, 0x6b, 0xfb, 0xc0, 0x63, 0xd8, 0x12, 0xea, 0x85,
	0x58, 0x46, 0x6a, 0xbc, 0x3a, 0xc7, 0xdc, 0x85, 0x37, 0x4f, 0x62, 0x2f, 0x25, 0x5c, 0x76, 0x8e,
	0x3b, 0x1a, 0x7a, 0x91, 0x1f, 0xaa, 0xad, 0x6f, 0x24, 0x91, 0xaf, 0x80, 0xd7, 0x7f, 0x4a, 0x50,
	0x16, 0x8c, 0x5f, 0x33, 0xde, 0x15, 0x17, 0x08, 0xb0, 0x79, 0xe5, 0x5c, 0x3a, 0xbd, 0x21, 0x79,
	0x86, 0x55, 0xd8, 0x36, 0x0d, 0x69, 0x32, 0xdb, 0xee, 0x49, 0xa3, 0x43, 0xc6, 0x58, 0x83, 0xaa,
	0x10, 0xd2, 0x65, 0xc2, 0x95, 0x0e, 0x73, 0x87, 0x3d, 0x7e, 0x49, 0xfc, 0x54, 0x15, 0x47, 0x64,
	0x50, 0x97, 0x92, 0x29, 0x1e, 0x42, 0xcd, 0x30, 0xe5, 0xfa, 0x33, 0x22, 0x5f, 0xf0, 0x00, 0xf6,
	0x52, 0x22, 0x0f, 0x93, 0x7c, 0x2d, 0xc0, 0xf9, 0xac, 0x64, 0x86, 0x08, 0xbb, 0x86, 0x29, 0xcf,
	0x2d, 0xc7, 0x12, 0x66, 0x62, 0xfd, 0x80, 0x08, 0x3b, 0xa6, 0x21, 0xf3, 0x17, 0x4f, 0xbe, 0x6b,
	0xb8, 0x0f, 0xd5, 0x18, 0x2b, 0xe4, 0x49, 0x7e, 0x68, 0x78, 0x04, 0xfb, 0x19, 0x5a, 0x4c, 0x87,
	0xfc, 0xd4, 0xf0, 0x10, 0x30, 0xa3, 0x0a, 0x05, 0x7f, 0x69, 0x48, 0xd4, 0x24, 0x89, 0x93, 0x6d,
	0x93, 0xdf, 0x5a, 0xe7, 0xe0, 0xa6, 0x16, 0x06, 0x41, 0xd4, 0xce, 0x32, 0x6a, 0x4f, 0x17, 0x0b,
	0x3f, 0xbc, 0xdd, 0x54, 0xe7, 0x77, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x47, 0x4f, 0xa7,
	0xc1, 0x03, 0x00, 0x00,
}
